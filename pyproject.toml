[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "git-patchdance"
version = "0.1.0"
authors = [
    {name = "Ronny Pfannschmidt", email = "opensource@ronnypfannschmidt.de"},
]
description = "Interactive terminal tool for git patch management"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["git", "patch", "tui", "interactive", "terminal"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: System Shells",
    "Topic :: Terminals",
]

dependencies = [
    "textual>=0.44.0",
    "gitpython>=3.1.40",
    "click>=8.1.0",
    "rich>=13.0.0",
]

[dependency-groups]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
lint = [
    "ruff>=0.1.0",
    "pre-commit>=3.4.0",
]
type = [
    "mypy>=1.6.0",
]
doc = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
]
dev = [
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "type"},
    {include-group = "doc"},
]

[project.urls]
Homepage = "https://github.com/RonnyPfannschmidt/git-patchdance"
Repository = "https://github.com/RonnyPfannschmidt/git-patchdance"
Documentation = "https://ronnypfannschmidt.github.io/git-patchdance"
Issues = "https://github.com/RonnyPfannschmidt/git-patchdance/issues"

[project.scripts]
git-patchdance = "git_patchdance.cli:main"

[tool.hatch.version]
path = "src/git_patchdance/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/git_patchdance"]

[tool.pytest.ini_options]
minversion = "8.4"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=git_patchdance",
    "--cov-report=term-missing",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = ["git.*", "textual.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.lint.isort]
known-first-party = ["git_patchdance"]


[tool.uv]
default-groups = ["dev"]

[tool.hatch.envs.default]
uv = true
groups = ["dev"]

[tool.hatch.envs.default.scripts]
lint = "ruff check --fix"
format = "ruff format"
type = "mypy src tests"

quality = ["lint", "format", "type"]
test = "pytest"

all = ["quality", "test"]

[tool.hatch.envs.test]
uv = true
groups = ["test"]

[tool.hatch.envs.test.scripts]
run = "pytest {args}"
cov = "pytest --cov {args}"

[tool.hatch.envs.lint]
uv = true
groups = ["lint"]

[tool.hatch.envs.lint.scripts]
check = "ruff check {args}"
fix = "ruff check --fix {args}"
format = "ruff format {args}"
hooks = "pre-commit run --all-files"

[tool.hatch.envs.type]
uv = true
groups = ["type"]

[tool.hatch.envs.type.scripts]
check = "mypy {args:src tests}"

[tool.hatch.envs.docs]
uv = true
groups = ["doc"]

[tool.hatch.envs.docs.scripts]
serve = "mkdocs serve"
build = "mkdocs build"
